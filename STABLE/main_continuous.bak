#include "sensys.nxc"
#include "DrivingControl_continuous.nxc"

// main

// Environment Constants
#define CAR_LENGTH 30
#define CAR_WIDTH 18
#define ERROR 2
#define HEAD_IN_DEPTH 32
#define HEAD_IN_WIDTH 28
#define PARALLEL_DEPTH 22
#define PARALLEL_LENGTH  36
#define CONCRETE_WIDTH 8
#define TURNING_RADIUS 4
#define PI 3
#define HEAD_IN_PARK 0
#define PARALLEL_PARK 1

#define SENSOR_OFFSET 2

// Keeps Track of
bool flag = false;
task Mario();
task Mario2();

// STATES

#define LOOKING 0
#define DETECTING 1
#define ALIGNMENT 2
#define PARK 3
#define STOP 4
#define RESET 5


// What do these do?
// Parking functions
void r(bool headOrParallel);
void p(bool headOrParallel);


// So I got a bit annoyed at it
task Mario2(){
PlayTone(196,100); Wait(150);
PlayTone(262 ,100); Wait(150);
PlayTone(330 ,100); Wait(150);
PlayTone(392 ,100); Wait(150);
PlayTone(523 ,100); Wait(150);
PlayTone(659 ,100); Wait(150);
PlayTone(784 ,300); Wait(350);
PlayTone(659 ,150); Wait(250);

PlayTone(208 ,100); Wait(150);
PlayTone(262 ,100); Wait(150);
PlayTone(311 ,100); Wait(150);
PlayTone(415 ,100); Wait(150);
PlayTone(523 ,100); Wait(150);
PlayTone(622 ,100); Wait(150);
PlayTone(831 ,300); Wait(350);
PlayTone(587 ,150); Wait(250);

PlayTone(233 ,100); Wait(150);
PlayTone(294 ,100); Wait(150);
PlayTone(349 ,100); Wait(150);
PlayTone(466 ,100); Wait(150);
PlayTone(587 ,100); Wait(150);
PlayTone(698 ,100); Wait(150);
PlayTone(932 ,200); Wait(250);
PlayTone(932 ,80); Wait(250);
PlayTone(932 ,80); Wait(250);
PlayTone(932 ,80); Wait(250);
PlayTone(1047 ,500); Wait(500);

}
task Mario(){
PlayTone(660 ,100); Wait(150);
PlayTone(660 ,100); Wait(300);
PlayTone(660 ,100); Wait(300);
PlayTone(510 ,100); Wait(100);
PlayTone(660 ,100); Wait(300);
PlayTone(770 ,100); Wait(550);
PlayTone(380 ,100); Wait(575);
PlayTone(510 ,100); Wait(450);
PlayTone(380 ,100); Wait(400);
PlayTone(320 ,100); Wait(500);
PlayTone(440 ,100); Wait(300);
PlayTone(480 ,80); Wait(330);
PlayTone(450 ,100); Wait(150);
PlayTone(430 ,100); Wait(300);
PlayTone(380 ,100); Wait(200);
PlayTone(660 ,80); Wait(200);
PlayTone(760 ,50); Wait(150);
PlayTone(860 ,100); Wait(300);
PlayTone(700 ,80); Wait(150);
PlayTone(760 ,50); Wait(350);
PlayTone(660 ,80); Wait(300);
PlayTone(520 ,80); Wait(150);
PlayTone(580 ,80); Wait(150);
PlayTone(480 ,80); Wait(500);
PlayTone(510 ,100); Wait(450);
PlayTone(380 ,100); Wait(400);
PlayTone(320 ,100); Wait(500);
PlayTone(440 ,100); Wait(300);
PlayTone(480 ,80); Wait(330);
PlayTone(450 ,100); Wait(150);
PlayTone(430 ,100); Wait(300);
PlayTone(380 ,100); Wait(200);
PlayTone(660 ,80); Wait(200);
PlayTone(760 ,50); Wait(150);
PlayTone(860 ,100); Wait(300);
PlayTone(700 ,80); Wait(150);
PlayTone(760 ,50); Wait(350);
PlayTone(660 ,80); Wait(300);
PlayTone(520 ,80); Wait(150);
PlayTone(580,80); Wait(150);
PlayTone(480 ,80); Wait(500);
PlayTone(500 ,100); Wait(300);
PlayTone(760,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(220);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,200); Wait(300);
PlayTone(1020 ,80); Wait(300);
PlayTone(1020 ,80); Wait(150);
PlayTone(1020, 80); Wait(300);
PlayTone(380 ,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(420);
PlayTone(585 ,100); Wait(450);
PlayTone(550 ,100); Wait(420);
PlayTone(500 ,100); Wait(360);
PlayTone(380,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(220);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,200); Wait(300);
PlayTone(1020 ,80); Wait(300);
PlayTone(1020 ,80); Wait(150);
PlayTone(1020, 80); Wait(300);
PlayTone(380,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(760,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(420);
PlayTone(585 ,100); Wait(450);
PlayTone(550 ,100); Wait(420);
PlayTone(500 ,100); Wait(360);
PlayTone(380 ,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,60); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(500 ,60); Wait(350);
PlayTone(500 ,80); Wait(150);
PlayTone(580 ,80); Wait(350);
PlayTone(660,80); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(430 ,80); Wait(150);
PlayTone(380 ,80); Wait(600);
PlayTone(500 ,60); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(500 ,60); Wait(350);
PlayTone(500 ,80); Wait(150);
PlayTone(580 ,80); Wait(150);
PlayTone(660 ,80); Wait(550);
PlayTone(870 ,80); Wait(325);
PlayTone(760 ,80); Wait(600);
PlayTone(500 ,60); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(500 ,60); Wait(350);
PlayTone(500 ,80); Wait(150);
PlayTone(580 ,80); Wait(350);
PlayTone(660 ,80); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(430 ,80); Wait(150);
PlayTone(380 ,80); Wait(600);
PlayTone(660 ,100); Wait(150);
PlayTone(660,100); Wait(300);
PlayTone(660, 100); Wait(300);
PlayTone(510 ,100); Wait(100);
PlayTone(660 ,100); Wait(300);
PlayTone(770 ,100); Wait(550);
PlayTone(380, 100); Wait(575);
}

int global_angle = 0;

// turnWheelsTo. If you want wheels to be *AT* x degrees, just input the angle and the function will figure
//           the difference between the current angle and the desired angle, and turn that amount
// angle can be negative or positive
/*void abs_turn(int angle)
{
  int turn;
  turn = angle - global_angle;
  global_angle = angle;
  turnWheelsTo(turn);
}

// rel_turn. If you want the wheel to be turned x degrees relative to whatever angle it is in right now, use this.
// angle can be positive or negative
void rel_turn(int angle)
{
  global_angle += angle;
  turnWheelsTo(angle);
}

// ctr_turn returns wheels to original position of 0 degrees.
void ctr_turn()
{
  turnWheelsTo(-global_angle);
  global_angle = 0;
}

            */
// Alignment for HEAD_IN_PARKING, need to do an S-TURN
void reverse(int reverseDistance, int distance_remembered) {
      if (reverseDistance <= (distance_remembered)) {
        turnWheelsTo(7);
        drive(-4);
    // } else {
    //    turnWheelsTo(-5);
    //    drive(-4);
     }

}

// PARKING
void park(bool headOrParallel, int parkDistance) {
     // IF HEAD_IN, TURN WHEELS AND DRIVE IN
     if (headOrParallel == HEAD_IN_PARK) {
        turnWheelsTo(-8);
        drive(5);
     // IF PARALLEL, DO AN S TURN
     } else {
        if (2*parkDistance <= (PARALLEL_LENGTH + PARALLEL_DEPTH/2)) {
           flag = true;
           turnWheelsTo(-7);
           drive(-5);
        } else {
           if (flag == true) {
              turnWheelsTo(0);
              drive(-7);
              flag = false;
           }
           turnWheelsTo(7);
           drive(-5);
        }
     }
}

void wiggle(int distance, bool state, int RIGHT, int FRONT) {
     if(state==PARALLEL_PARK) {
         //Acquire(Mutex_Sensys4);
         if(Touch4){
              //Release(Mutex_Sensys4);
              turnWheelsTo(0);
              drive((1000 * distance/2)/1000);
              turnWheelsTo(-8);
              drive(-(400 * distance/2)/1000);
              turnWheelsTo(8);
              drive(-(405 * distance/2)/1000);
              turnWheelsTo(0);
         } else {
             if(FRONT < 10 || RIGHT < 10) {
                 if(FRONT - 1 - 2 >= RIGHT) {
                     if (RIGHT > 70) {
                         drive(-2);
                     } else {
                         turnWheelsTo(-4);
                         drive(2);
                     }
                 } else if (FRONT - 1 + 2 <= RIGHT){
                      if (RIGHT > 70) {
                          drive(-2);
                      } else {
                          turnWheelsTo(4);
                          drive(2);
                      }
                 }
             } else {
                  turnWheelsTo(0);
                  drive(-1);
             }
         }
     } else {
         if(2 * RIGHT <  distance){
              drive(-CAR_LENGTH);
              turnWheelsTo(4);
              drive((3*CAR_LENGTH)/10);
              turnWheelsTo(0);
              drive((3*CAR_LENGTH)/10);
              turnWheelsTo(-5);
              drive((3*CAR_LENGTH)/10 + 3);
              turnWheelsTo(0);
         } else if(2 * RIGHT >= distance - ERROR){
              drive(-CAR_LENGTH);
              turnWheelsTo(-4);
              drive((3*CAR_LENGTH)/10);
              turnWheelsTo(0);
              drive((3*CAR_LENGTH)/10);
              turnWheelsTo(5);
              drive((3*CAR_LENGTH)/10 + 1);
              turnWheelsTo(0);
         } else{
              drive(1);
         }
     }
     if(FRONT - 1 + 1 <= RIGHT && state == HEAD_IN_PARK){
              turnWheelsTo(-4);
              drive(-5);
              turnWheelsTo(4);
              drive(5);
              turnWheelsTo(0);
              }
     if(FRONT - 1 - 1 >= RIGHT && state == HEAD_IN_PARK){
              turnWheelsTo(4);
              drive(-5);
              turnWheelsTo(-4);
              drive(5);
              turnWheelsTo(0);
     }
}

void clean_up(){
     while(!Touch1){
     drive(1);
     }
     drive(-CAR_LENGTH/6);
}

task main();

// @TODO: Calibrate distances
// @TODO: Implement reverse and park function
// @TODO: Cap the turning (software limits)
// @TODO: check on different surfaces



task main() {

     // start other tasks for low level control
     SetSensorLowspeed(US2_PORT);
     SetSensorLowspeed(US3_PORT);
     SetSensorTouch(TC1_PORT);
     SetSensorTouch(TC4_PORT);
     Wait(3000);

     start Sensys;
     InitBase();
     start Touchsys;
     start Mario;


     Wait(2000);

     // default state
     int state = LOOKING;

     // global variables keeping state attributes
     int distance_remembered = 0;
     int distance_reversing = 0;
     int park_distance = 0;
     bool isParallel = HEAD_IN_PARK;
     bool isHalfReversing = 0;
     int drop = 0;

     int count = 0;

     PlayTone(1047, 300);
     Wait(2000);

     while (true) {

           // Initial sensor values default to 0, don't want to enter
           // state RESET right away
           count++;
           if (state == RESET) break;

           // print sensors
           ClearScreen();
           TextOut(0,LCD_LINE1,"front:");
           NumOut(0,LCD_LINE2,FRONT);

           TextOut(30,LCD_LINE1,"right:");
           NumOut(30,LCD_LINE2,RIGHT);

           // print current State
           TextOut(0, LCD_LINE3, "state: ");
           NumOut(0, LCD_LINE4, state);

           TextOut(30, LCD_LINE3, "headorparallel:");
           NumOut(30, LCD_LINE4, isParallel);

           TextOut(0 ,LCD_LINE5, "dist:");
           NumOut(0, LCD_LINE6, distance_remembered);

           TextOut(30, LCD_LINE5, "BASE:");
           NumOut(30, LCD_LINE6, InitialBase);

           TextOut(60, LCD_LINE5, "drop");
           NumOut(60, LCD_LINE6, drop);

	         // state evolution
	         // AUTOMATIC RESET (automatic stop)
	         if ((RIGHT < 3 && FRONT < 3) && (count > 10) && (state!=STOP && state!=PARK)) {
              PlayTone(1047, 300);
              state = RESET;
           }

           // state machine for parking
           switch(state) {
               case RESET:
                   //safe_hazard_flag = true;
                   //stopDriving();
                   break;
                   // STOP state assumes you've finished parking
                   // Must check to see if you have stopped correctly
                   case STOP:
                       // If you are STOPPED incorrectly, wiggle until you are
                       // PARALLEL: within 10 cm to right curb
                       // HEAD-IN: within 10 cm to front curb
                       if((FRONT - 1 - 1 >= RIGHT) || (FRONT - 1 + 1 <= RIGHT) || (RIGHT > 8 && isParallel == PARALLEL_PARK && FRONT > 8) || (RIGHT < distance_remembered/2 && isParallel == HEAD_IN_PARK && FRONT < distance_remembered/2) || (RIGHT > distance_remembered/2 + ERROR && isParallel == HEAD_IN_PARK && FRONT > distance_remembered/2 + ERROR)){
                           wiggle(distance_remembered,isParallel,RIGHT,FRONT);
                       } else {
                           // Play the Finish Song
                           if (RIGHT <= 8 && isParallel==PARALLEL_PARK && FRONT <= 8) {
                               turnWheelsTo(0);
                               start Mario2;
                               state = RESET;
                           // Try to get as close to the curb as possible
                           } else {
                               if (FRONT >= distance_remembered/2 && isParallel==HEAD_IN_PARK && RIGHT >= distance_remembered/2) {
                                  turnWheelsTo(0);
                                  clean_up();
                                  start Mario2;
                                  state = RESET;
                               } else {
                                 drive(1);
                               }
                           }
                       }
                       break;
                   case LOOKING:
                       // if there's a jump larger than parallel_depth you are in head_in)
                       if (RIGHT >= InitialBase + ERROR && RIGHT < InitialBase +3*ERROR) {
                           turnWheelsTo(-2);
                           drive(4);
                           turnWheelsTo(0);
                       } else if (RIGHT <= InitialBase - ERROR && RIGHT > InitialBase - 3*ERROR) {
                           turnWheelsTo(2);
                           drive(4);
                           turnWheelsTo(0);
                       }  else
                       // if there's a jump larger than parallel_depth you are in head_in)
                       if (RIGHT > InitialBase + HEAD_IN_DEPTH - 3*ERROR) {
                           isParallel = HEAD_IN_PARK;
                           Wait(250);
                           drop = RIGHT;
                           state = DETECTING;
                       } else if (RIGHT > InitialBase + PARALLEL_DEPTH - 3*ERROR) {
                           isParallel = PARALLEL_PARK;
                           Wait(250);
                           drop = RIGHT;
                           state = DETECTING;
                       } else {
                           if (RIGHT < InitialBase - ERROR) {
                              Wait(250);
                              InitBase();
                           }
                           drive(2);
                       }
                       break;
                 case DETECTING:
                      // HEAD_IN_PARKING
                      // Traveling A LARGE ENOUGH DISTANCE, SPACE DETECTED
                      if (distance_remembered >= HEAD_IN_WIDTH && (isParallel == HEAD_IN_PARK)) {
                         // stop
                         //distance_remembered = 0;
                         state = ALIGNMENT;
                      // If the right sensor is less than the initial (an obstacle in the way, go back to looking)
                      // ask tyler about this line below
                      } else if ((RIGHT <= (InitialBase  + HEAD_IN_DEPTH - 3*ERROR)) && (isParallel == HEAD_IN_PARK)) {
                         // stop
                         distance_remembered = 0;
                         state = LOOKING;
                      // PARALLEL_PARKING
                      // Traveling A LARGE ENOUGH DISTANCE, SPACE DETECTED
                      } else if ((distance_remembered >= PARALLEL_LENGTH) && (isParallel == PARALLEL_PARK)) {
                         // stop
                         //distance_remembered = 0;
                         state = ALIGNMENT;
                      // If the right sensor is less than the initial (an obstacle in the way, go back to looking)
                      // ask tyler about this line below
                      } else if ((RIGHT <= InitialBase  + PARALLEL_DEPTH - 3*ERROR) && (isParallel == PARALLEL_PARK)) { // if the spot isn't big enough
                         // stop
                         distance_remembered = 0;
                         state = LOOKING;
                      // corrective steering
                      } else if((RIGHT <= drop + 2*ERROR) && (RIGHT > drop)){
                         turnWheelsTo(-2);
                         drive(2);
                         turnWheelsTo(0);
                         distance_remembered+=2;
                       } else if((RIGHT >= drop - 2*ERROR) && (RIGHT < drop)){
                         turnWheelsTo(2);
                         drive(2);
                         turnWheelsTo(0);
                         distance_remembered += 2;
                       } else {
                          if (RIGHT < drop - 2*ERROR) {
                              Wait(250);
                              drop = RIGHT;
                          }
                          drive(2);
                          distance_remembered += 2;
                      }
			                break;
                 case ALIGNMENT:
                      // IF YOU'VE ALIGNED ENOUGH, I.E. REVERSE AFTER S-TURN, GO INTO PARK
                      if (distance_reversing >= (distance_remembered /*+ HEAD_IN_DEPTH/2*/) && (isParallel == HEAD_IN_PARK)) {
                          // stop
                          turnWheelsTo(0);
                          drive((-1 * ERROR));
                          distance_reversing = 0;
                          state = PARK;
                      // IF IN PARALLEL, DO CORRECTIVE STERRING UNTIL YOU'RE PARALLEL (I.E. DRIVE FORWARD BEFORE YOU PARK)
                      } else if (isParallel == PARALLEL_PARK) {      //Wont work if theres something parked in front yet.well maybe
                          // distance_reversing = 0;
                          int drivedist = CAR_LENGTH/2;
                          while(drivedist > 0){
                              if ((RIGHT <= drop + 2*ERROR) && (RIGHT > drop)){
                                  turnWheelsTo(-2);
                                  drive(2);
                                  turnWheelsTo(0);
                                  drivedist-=2;
                                  continue;
                              } else if((RIGHT >= drop - 2*ERROR) && (RIGHT < drop)){
                                  turnWheelsTo(2);
                                  drive(2);
                                  turnWheelsTo(0);
                                  drivedist-=2;
                                  continue;
                              } else {
                                  if(RIGHT < drop - 2*ERROR){
                                      Wait(250);
                                      drop = RIGHT;
                                  }
                                  drive(2);
                                  drivedist-=2;
                              }
                         }
                         state = PARK;
                      // HEAD_IN_PARK => GO INTO S-TURN
                      } else {
                         reverse(distance_reversing,distance_remembered);
                         distance_reversing += 4;
                      }
                      break;
                 case PARK:
                    // HEAD_IN_PARK => IF YOU'VE RIGHT TURNED ENOUGH, GO INTO STOP, WIGGLE
                      if ((park_distance >= HEAD_IN_DEPTH) && (isParallel == HEAD_IN_PARK)) {
                         turnWheelsTo(0);
                         PlayTone(1047, 300);
                         state = STOP;
                      // PARALLEL_PARK => IF YOU'VE S-TURNED ENOUGH, GO INTO STOP, WIGGLE
                      } else if(park_distance >= (PARALLEL_LENGTH + (PARALLEL_DEPTH/2)) && (isParallel == PARALLEL_PARK)) {
                         // stop
                         // play mario
                         turnWheelsTo(0);
                         PlayTone(1047, 300);
                         state = STOP;
                      // PARK MOTION: RIGHT TURN OR S-TURN DEPENDING ON WHAT TYPE OF PARKING.
                      } else {
                         park(isParallel, park_distance);
                         park_distance += 5;
                      }
			                break;
          }
   	}


} // main


