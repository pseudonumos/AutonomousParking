

#include "sensys.nxc"
#include "DrivingControl_continuous.nxc"

//#define TESTING
#define CONTINUOUS_DRIVING_ERROR 20
void printStats(int state, int isParallel, int distance_remembered, int InitialBase, int odometer, int odometerSnapshot);

// main
    //64
// Environment Constants
#define CAR_LENGTH 30
#define CAR_WIDTH 18
#define ERROR 2
#define HEAD_IN_DEPTH 32
#define HEAD_IN_WIDTH 30
#define PARALLEL_DEPTH 22
#define PARALLEL_LENGTH  44
#define CONCRETE_WIDTH 8
#define TURNING_RADIUS 4
#define PI 3
#define HEAD_IN_PARK 0
#define PARALLEL_PARK 1

// Keeps Track of
bool flag = false;
task Mario();
task Mario2();


// STATES

#define LOOKING 0
#define DETECTING 1
#define ALIGNMENT 2
#define PARK 3
#define STOP 4
#define RESET 5


// What do these do?
// Parking functions
void r(bool headOrParallel);
void p(bool headOrParallel);


// So I got a bit annoyed at it
task Mario2(){
PlayTone(196,100); Wait(150);
PlayTone(262 ,100); Wait(150);
PlayTone(330 ,100); Wait(150);
PlayTone(392 ,100); Wait(150);
PlayTone(523 ,100); Wait(150);
PlayTone(659 ,100); Wait(150);
PlayTone(784 ,300); Wait(350);
PlayTone(659 ,150); Wait(250);

PlayTone(208 ,100); Wait(150);
PlayTone(262 ,100); Wait(150);
PlayTone(311 ,100); Wait(150);
PlayTone(415 ,100); Wait(150);
PlayTone(523 ,100); Wait(150);
PlayTone(622 ,100); Wait(150);
PlayTone(831 ,300); Wait(350);
PlayTone(587 ,150); Wait(250);

PlayTone(233 ,100); Wait(150);
PlayTone(294 ,100); Wait(150);
PlayTone(349 ,100); Wait(150);
PlayTone(466 ,100); Wait(150);
PlayTone(587 ,100); Wait(150);
PlayTone(698 ,100); Wait(150);
PlayTone(932 ,200); Wait(250);
PlayTone(932 ,80); Wait(250);
PlayTone(932 ,80); Wait(250);
PlayTone(932 ,80); Wait(250);
PlayTone(1047 ,500); Wait(500);

}
task Mario(){
PlayTone(660 ,100); Wait(150);
PlayTone(660 ,100); Wait(300);
PlayTone(660 ,100); Wait(300);
PlayTone(510 ,100); Wait(100);
PlayTone(660 ,100); Wait(300);
PlayTone(770 ,100); Wait(550);
PlayTone(380 ,100); Wait(575);
PlayTone(510 ,100); Wait(450);
PlayTone(380 ,100); Wait(400);
PlayTone(320 ,100); Wait(500);
PlayTone(440 ,100); Wait(300);
PlayTone(480 ,80); Wait(330);
PlayTone(450 ,100); Wait(150);
PlayTone(430 ,100); Wait(300);
PlayTone(380 ,100); Wait(200);
PlayTone(660 ,80); Wait(200);
PlayTone(760 ,50); Wait(150);
PlayTone(860 ,100); Wait(300);
PlayTone(700 ,80); Wait(150);
PlayTone(760 ,50); Wait(350);
PlayTone(660 ,80); Wait(300);
PlayTone(520 ,80); Wait(150);
PlayTone(580 ,80); Wait(150);
PlayTone(480 ,80); Wait(500);
PlayTone(510 ,100); Wait(450);
PlayTone(380 ,100); Wait(400);
PlayTone(320 ,100); Wait(500);
PlayTone(440 ,100); Wait(300);
PlayTone(480 ,80); Wait(330);
PlayTone(450 ,100); Wait(150);
PlayTone(430 ,100); Wait(300);
PlayTone(380 ,100); Wait(200);
PlayTone(660 ,80); Wait(200);
PlayTone(760 ,50); Wait(150);
PlayTone(860 ,100); Wait(300);
PlayTone(700 ,80); Wait(150);
PlayTone(760 ,50); Wait(350);
PlayTone(660 ,80); Wait(300);
PlayTone(520 ,80); Wait(150);
PlayTone(580,80); Wait(150);
PlayTone(480 ,80); Wait(500);
PlayTone(500 ,100); Wait(300);
PlayTone(760,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(220);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,200); Wait(300);
PlayTone(1020 ,80); Wait(300);
PlayTone(1020 ,80); Wait(150);
PlayTone(1020, 80); Wait(300);
PlayTone(380 ,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(420);
PlayTone(585 ,100); Wait(450);
PlayTone(550 ,100); Wait(420);
PlayTone(500 ,100); Wait(360);
PlayTone(380,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(220);
PlayTone(500 ,100); Wait(300);
PlayTone(760 ,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,200); Wait(300);
PlayTone(1020 ,80); Wait(300);
PlayTone(1020 ,80); Wait(150);
PlayTone(1020, 80); Wait(300);
PlayTone(380,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(760,100); Wait(100);
PlayTone(720 ,100); Wait(150);
PlayTone(680 ,100); Wait(150);
PlayTone(620 ,150); Wait(300);
PlayTone(650 ,150); Wait(300);
PlayTone(380 ,100); Wait(150);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(430 ,100); Wait(150);
PlayTone(500 ,100); Wait(100);
PlayTone(570 ,100); Wait(420);
PlayTone(585 ,100); Wait(450);
PlayTone(550 ,100); Wait(420);
PlayTone(500 ,100); Wait(360);
PlayTone(380 ,100); Wait(300);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,100); Wait(150);
PlayTone(500 ,100); Wait(300);
PlayTone(500 ,60); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(500 ,60); Wait(350);
PlayTone(500 ,80); Wait(150);
PlayTone(580 ,80); Wait(350);
PlayTone(660,80); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(430 ,80); Wait(150);
PlayTone(380 ,80); Wait(600);
PlayTone(500 ,60); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(500 ,60); Wait(350);
PlayTone(500 ,80); Wait(150);
PlayTone(580 ,80); Wait(150);
PlayTone(660 ,80); Wait(550);
PlayTone(870 ,80); Wait(325);
PlayTone(760 ,80); Wait(600);
PlayTone(500 ,60); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(500 ,60); Wait(350);
PlayTone(500 ,80); Wait(150);
PlayTone(580 ,80); Wait(350);
PlayTone(660 ,80); Wait(150);
PlayTone(500 ,80); Wait(300);
PlayTone(430 ,80); Wait(150);
PlayTone(380 ,80); Wait(600);
PlayTone(660 ,100); Wait(150);
PlayTone(660,100); Wait(300);
PlayTone(660, 100); Wait(300);
PlayTone(510 ,100); Wait(100);
PlayTone(660 ,100); Wait(300);
PlayTone(770 ,100); Wait(550);
PlayTone(380, 100); Wait(575);
}

// Alignment for HEAD_IN_PARKING, need to do an S-TURN
void reverse(int reverseDistance, int distance_remembered) {
      if (reverseDistance <= (distance_remembered)) {
        abs_turn(7);
        drive(-4);
     } else {
        abs_turn(-5);
        drive(-4);
     }
}

// PARKING
void park(bool headOrParallel, int parkDistance) {
     // IF HEAD_IN, TURN WHEELS AND DRIVE IN
     if (headOrParallel == HEAD_IN_PARK) {
        abs_turn(-8);
        drive(5);
     // IF PARALLEL, DO AN S TURN
     } else {
        if (2*parkDistance <= (PARALLEL_LENGTH + PI*PARALLEL_DEPTH/2)) {
           abs_turn(-7);
           drive(-5);
        } else {
           abs_turn(7);
           drive(-5);
        }
     }
}

void wiggle(int distance, bool state, int RIGHT) {
     if(state==PARALLEL_PARK) {
         //Acquire(Mutex_Sensys4);
         if(Touch4){
              //Release(Mutex_Sensys4);
              flag = false;
              abs_turn(0);
              drive((1000 * distance/2)/1000);
              abs_turn(-8);
              drive(-(400 * distance/2)/1000);
              abs_turn(8);
              drive(-(405 * distance/2)/1000);
              abs_turn(0);
         } else {
              drive(-1);
              flag = true;
         }
     } else {
         if(2 * RIGHT <  distance - ERROR){
              drive(-CAR_LENGTH);
              abs_turn(4);
              drive((3*CAR_LENGTH)/10);
              abs_turn(0);
              drive((3*CAR_LENGTH)/10);
              abs_turn(-5);
              drive((3*CAR_LENGTH)/10);
              abs_turn(0);
         } else if(2 * RIGHT > distance + ERROR){
              drive(-CAR_LENGTH);
              abs_turn(-4);
              drive((3*CAR_LENGTH)/10);
              abs_turn(0);
              drive((3*CAR_LENGTH)/10);
              abs_turn(5);
              drive((3*CAR_LENGTH)/10);
              abs_turn(0);
         } else{
              drive(1);
         }
     }
}

task main();

task main() {
#ifdef TESTING
testDrivingContinuous(20);          //run test function
Wait(300000);                 //we don't want the rest of main, but this is easier than commenting it out
#endif

int odometerSnapshot = 0;



     // start other tasks for low level control
     SetSensorLowspeed(US2_PORT);
     SetSensorLowspeed(US3_PORT);
     SetSensorTouch(TC1_PORT);
     SetSensorTouch(TC4_PORT);
     //Wait(3000);

     start Sensys;
     InitBase();
     start Touchsys;
     start Mario;

     Wait(2000);

     // default state
     int state = LOOKING;

     // global variables keeping state attributes
     int distance_remembered = 0;
     int distance_reversing = 0;
     int park_distance = 0;
     bool isParallel = HEAD_IN_PARK;
     bool isHalfReversing = 0;
     int drop = 0;

     int count = 0;

     PlayTone(1047, 300);
     Wait(2000);

     while (true) {

           // Initial sensor values default to 0, don't want to enter
           // state RESET right away
           count++;
           if (state == RESET) break;

					 printStats(state, isParallel, distance_remembered, InitialBase, odometer, odometerSnapshot);

	         // state evolution
	         // AUTOMATIC RESET (automatic stop)
	         if ((RIGHT < 3 || FRONT < 5) && (count > 10) && (state!=STOP && state!=PARK)) {
              PlayTone(1047, 300);
              state = RESET;
           }

           // state machine for parking
           switch(state) {
               case RESET:
                   safe_hazard_flag = true;
                   stopDriving();
                   break;
                   // STOP state assumes you've finished parking
                   // Must check to see if you have stopped correctly
                   case STOP:
                       // If you are STOPPED incorrectly, wiggle until you are
                       // PARALLEL: within 10 cm to right curb
                       // HEAD-IN: within 10 cm to front curb
                       if((RIGHT > 8 && isParallel == PARALLEL_PARK) || (FRONT > 8 && isParallel == HEAD_IN_PARK) ){
                           wiggle(distance_remembered,isParallel,RIGHT);
                       } else {
                           // Play the Finish Song
                           if (RIGHT <= 8 && isParallel==PARALLEL_PARK) {
                               abs_turn(0);
                               start Mario2;
                               state = RESET;
                           // Try to get as close to the curb as possible
                           } else {
                               if (FRONT <= 8 && isParallel==HEAD_IN_PARK) {
                                  abs_turn(0);
                                  start Mario2;
                                  state = RESET;
                               } else {
                                 drive(1);
                               }
                           }
                       }
                       break;
                   case LOOKING:
                       // If you are misaligned (too far to the left)
                       if (RIGHT >= InitialBase + ERROR) {
                             // if there's a jump larger than parallel_depth you are in head_in)
                             if (RIGHT > InitialBase + HEAD_IN_DEPTH - 2*ERROR) {
                                 isParallel = HEAD_IN_PARK;
                                 Wait(250);
                                 drop = RIGHT;
                                 state = DETECTING;
                             } else if (RIGHT > InitialBase + PARALLEL_DEPTH - 2*ERROR) {
                                 isParallel = PARALLEL_PARK;
                                 Wait(250);
                                 drop = RIGHT;
                                 state = DETECTING;
                             } else {
                                 //corrective steering to the right
                                 abs_turn(-2);
                                 drive(5);
                                 abs_turn(0);
                                 Wait(250);
                                 InitBase();
                             }
                     // If you are misaligned (too far to the right)
                     } else if(RIGHT <= InitialBase - ERROR){
                           // corrective steering to the left
                           abs_turn(2);
                           drive(5);
                           abs_turn(0);
                           Wait(100);
                           InitBase();
                     } else {
                           drive(5);
                     }
                     break;
                 case DETECTING:
										driveContinuous(FORWARD);
										distance_remembered = 0;
										odometerSnapshot = odometer;
										while (!safe_hazard_flag && !stop_driving_flag) {

    													         ClearScreen();
														           TextOut(0,LCD_LINE1,"front:");
														           NumOut(0,LCD_LINE2,FRONT);

														           TextOut(30,LCD_LINE1,"right:");
														           NumOut(30,LCD_LINE2,RIGHT);

														           // print current State
														           TextOut(0, LCD_LINE3, "state: ");
														           NumOut(0, LCD_LINE4, state);

														           TextOut(30, LCD_LINE3, "headorparallel:");
														           NumOut(30, LCD_LINE4, isParallel);

														           TextOut(0 ,LCD_LINE5, "dist:");
														           NumOut(0, LCD_LINE6, distance_remembered);

														           TextOut(30, LCD_LINE5, "BASE:");
														           NumOut(30, LCD_LINE6, InitialBase);

														            TextOut(0 ,LCD_LINE7, "odo:");
														           NumOut(0, LCD_LINE8, odometer);

														           TextOut(30, LCD_LINE7, "odometerSnapshot:");
														           NumOut(30, LCD_LINE8, odometerSnapshot);

														           Wait(100);


                   			  // HEAD_IN_PARKING
		                      // Traveling A LARGE ENOUGH DISTANCE, SPACE DETECTED
		                      if (isParallel == HEAD_IN_PARK) {
																 if ((odometer - odometerSnapshot) >= HEAD_IN_WIDTH) {
				                         // stop
				                         stopDriving();
				                         distance_remembered = odometer - odometerSnapshot;
				                         state = ALIGNMENT;
				                         break;        //break out of while loop
				                      // If the right sensor is less than the initial (an obstacle in the way, go back to looking)
				                      // ask tyler about this line below
				                      } else if ((RIGHT <= (InitialBase  + HEAD_IN_DEPTH - 2*ERROR))) {
				                         // stop
				                         //distance_remembered = 0;      //JFong: moved to beginning of state
				                         stopDriving();
				                         state = LOOKING;
				                         break;        //break out of while loop
				                         }
													} // end of if for head-in parking
		                      // PARALLEL_PARKING
		                      // Traveling A LARGE ENOUGH DISTANCE, SPACE DETECTED
		                      else if (isParallel == PARALLEL_PARK) {
																if ((odometer - odometerSnapshot) >= PARALLEL_LENGTH) {
					                         // stop
				                         //distance_remembered = 0;      //JFong: moved to beginning of state
					                         stopDriving();
				                         distance_remembered = odometer - odometerSnapshot;
					                         state = ALIGNMENT;
					                         break;        //break out of while loop
					                      // If the right sensor is less than the initial (an obstacle in the way, go back to looking)
					                      // ask tyler about this line below
					                      } else if ((RIGHT <= InitialBase  + PARALLEL_DEPTH - 2*ERROR)) { // if the spot isn't big enough
					                         // stop
				                         //distance_remembered = 0;      //JFong: moved to beginning of state
					                         stopDriving();
					                         state = LOOKING;
					                         break;        //break out of while loop
					                         }
		                         }  // end of if for parallel parking
      									  // corrective steering
													//JFong: the code below never executes  for some reason though... =/
		                        else if((RIGHT <= drop + ERROR) && (RIGHT > drop)){
		                                              playResult(TRUE);
		                                              Wait(1000);
		                        turnWheelsTo(-2);
		                        //until(odometer >= odometerSnapshot+2);     // wait until we drive a small distance
		                         turnWheelsTo(0);
		                         //distance_remembered+=2;
		                       } else if((RIGHT >= drop - ERROR) && (RIGHT < drop)){
		                                             playResult(TRUE);
		                                              Wait(1000);
		                         turnWheelsTo(2);
		                        //until(odometer >= odometerSnapshot+2);     // wait until we drive a small distance
		                           turnWheelsTo(0);
		                          //distance_remembered += 2;
		                       } else {
		                                             playResult(TRUE);
		                                              Wait(1000);
		                          if (RIGHT < drop - ERROR) {
		                              drop = RIGHT;
		                          }
		                        //until(odometer >= odometerSnapshot+2);     // wait until we drive a small distance
		                          //distance_remembered += 2;
		                      }
                      } // while

                      playResult(TRUE);

                      //Wait(5000);
			                break;
                 case ALIGNMENT:
                      // IF IN PARALLEL, DO CORRECTIVE STEERING UNTIL YOU'RE PARALLEL (I.E. DRIVE FORWARD BEFORE YOU PARK)
                      if (isParallel == PARALLEL_PARK) {      //Wont work if theres something parked in front yet.well maybe
                          // distance_reversing = 0;
                          //int drivedist = CAR_LENGTH - 4;
                          odometerSnapshot = odometer;
                          driveContinuous(FORWARD);
                          while(odometer <= odometerSnapshot + CAR_LENGTH - 4){

														           TextOut(0,LCD_LINE1,"front:");
														           NumOut(0,LCD_LINE2,FRONT);

														           TextOut(30,LCD_LINE1,"right:");
														           NumOut(30,LCD_LINE2,RIGHT);

														           // print current State
														           TextOut(0, LCD_LINE3, "state: ");
														           NumOut(0, LCD_LINE4, state);

														           TextOut(30, LCD_LINE3, "headorparallel:");
														           NumOut(30, LCD_LINE4, isParallel);

														           TextOut(0 ,LCD_LINE5, "dist:");
														           NumOut(0, LCD_LINE6, distance_remembered);

														           TextOut(30, LCD_LINE5, "BASE:");
														           NumOut(30, LCD_LINE6, InitialBase);

														            TextOut(0 ,LCD_LINE7, "odo:");
														           NumOut(0, LCD_LINE8, odometer);

														           TextOut(30, LCD_LINE7, "odoS:");
														           NumOut(30, LCD_LINE8, odometerSnapshot);


                              if(RIGHT < drop - ERROR){
																	 stopDriving();
                                  Wait(250);
                                  driveContinuous(FORWARD);
                                  drop = RIGHT;
                              } else if ((RIGHT <= drop + ERROR) && (RIGHT > drop)){
                                  turnWheelsTo(-2);
                                  //drive(2);
                                  turnWheelsTo(0);
                                  //drivedist-=2;
                                  continue;
                              } else if((RIGHT >= drop - ERROR) && (RIGHT < drop)){
                                  turnWheelsTo(2);
                                  //drive(2);
                                  turnWheelsTo(0);
                                  //drivedist-=2;
                                  continue;
                              } else {
                                  //drive(2);
                                  //drivedist-=2;
                              }
                              Wait(100);
                         }
													stopDriving();
              											   TextOut(0 ,LCD_LINE7, "odo:");
														           NumOut(0, LCD_LINE8, odometer);
                           playResult(TRUE);
                         //Wait(5000);
                         state = PARK;

                      }  else 	{
                     		// HEAD_IN_PARK => GO INTO S-TURN
												odometerSnapshot = odometer;
            				        turnWheelsTo(7);
            				       	driveContinuous(REVERSE);
            				        until((odometer - odometerSnapshot) * 2 >= distance_remembered);
														playResult(TRUE);
														TextOut(0 ,LCD_LINE7, "odo:");
												    NumOut(0, LCD_LINE8, odometer);
														turnWheelsTo(-5);
            				        until(odometer - odometerSnapshot - ERROR >= distance_remembered);
														playResult(TRUE);
            				        TextOut(0 ,LCD_LINE7, "odo:");
												    NumOut(0, LCD_LINE8, odometer);
            				        turnWheelsTo(0);
            				        until(odometer - odometerSnapshot - (ERROR * 5) >= distance_remembered);
														playResult(TRUE);
														TextOut(0 ,LCD_LINE7, "odo:");
												    NumOut(0, LCD_LINE8, odometer);
            				        stopDriving();
                            state = PARK;
						} // else

                      break;
                 case PARK:
                    // HEAD_IN_PARK => IF YOU'VE RIGHT TURNED ENOUGH, GO INTO STOP, WIGGLE
                      if ((park_distance >= (HEAD_IN_DEPTH + (PI*TURNING_RADIUS/2)) - 2 * ERROR) && (isParallel == HEAD_IN_PARK)) {
                         turnWheelsTo(0);
                         PlayTone(1047, 300);
                         state = STOP;
                      // PARALLEL_PARK => IF YOU'VE S-TURNED ENOUGH, GO INTO STOP, WIGGLE
                      } else if((2 * park_distance >= (PARALLEL_LENGTH + PI*TURNING_RADIUS/2)) && (isParallel == PARALLEL_PARK)) {
                         // stop
                         // play mario
                         turnWheelsTo(0);
                         PlayTone(1047, 300);
                         state = STOP;
                      // PARK MOTION: RIGHT TURN OR S-TURN DEPENDING ON WHAT TYPE OF PARKING.
                      } else {
                         park(isParallel, park_distance);
                         if (isParallel == PARALLEL_PARK) {
                           park_distance += 2;
                          } else {
                            park_distance += 3;
                         }
                      }
			                break;
          }
   	}


} // main


void printStats(state, isParallel, distance_remembered, InitialBase, odometer, odometerSnapshot) {
          ClearScreen();
           TextOut(0,LCD_LINE1,"front:");
           NumOut(0,LCD_LINE2,FRONT);

           TextOut(30,LCD_LINE1,"right:");
           NumOut(30,LCD_LINE2,RIGHT);

           // print current State
           TextOut(0, LCD_LINE3, "state: ");
           NumOut(0, LCD_LINE4, state);

           TextOut(30, LCD_LINE3, "headorparallel:");
           NumOut(30, LCD_LINE4, isParallel);

           TextOut(0 ,LCD_LINE5, "dist:");
           NumOut(0, LCD_LINE6, distance_remembered);

           TextOut(30, LCD_LINE5, "BASE:");
           NumOut(30, LCD_LINE6, InitialBase);

            TextOut(0 ,LCD_LINE7, "odo:");
           NumOut(0, LCD_LINE8, odometer);

           TextOut(30, LCD_LINE7, "odoS:");
           NumOut(30, LCD_LINE8, odometerSnapshot);



           } // printStats()
